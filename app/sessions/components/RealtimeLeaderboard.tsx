import { motion, AnimatePresence } from 'framer-motion';
import { Medal, ChevronUp, ChevronDown, Minus } from 'lucide-react';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Card } from '@/components/ui/card';
import { useEffect, useState, useMemo, useRef, useCallback } from 'react';
import {
  LeaderboardManager,
  RankedParticipant,
} from '@/websocket/sessionWebSocket';

interface Participant {
  displayName: string;
  displayAvatar: string;
  realtimeScore: number;
  realtimeRanking: number;
  id?: string;
}

interface RealtimeLeaderboardProps {
  participants?: Participant[];
  currentUserName?: string;
  onScoreUpdate?: (score: number, id: string | undefined) => void;
}

export default function RealtimeLeaderboard({
  participants: propParticipants,
  currentUserName,
  onScoreUpdate,
}: RealtimeLeaderboardProps) {
  // State ƒë·ªÉ l∆∞u danh s√°ch ng∆∞·ªùi tham gia
  const [participants, setParticipants] = useState<RankedParticipant[]>([]);
  // State ƒë·ªÉ l∆∞u ƒëi·ªÉm s·ªë tr∆∞·ªõc ƒë√≥
  const [prevScore, setPrevScore] = useState<number>(0);
  // Ref ƒë·ªÉ l∆∞u th·ª© h·∫°ng tr∆∞·ªõc ƒë√≥
  const prevRankingRef = useRef<{ [key: string]: number }>({});
  // Ref ƒë·ªÉ theo d√µi ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
  const initializedRef = useRef(false);
  // ƒê·∫øm s·ªë l·∫ßn c·∫≠p nh·∫≠t ƒë·ªÉ l√†m key cho animation
  const updateCountRef = useRef(0);
  // Ref ƒë·ªÉ l∆∞u th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi c√πng
  const lastUpdateTimeRef = useRef(Date.now());

  // H√†m x·ª≠ l√Ω khi nh·∫≠n c·∫≠p nh·∫≠t t·ª´ LeaderboardManager
  const handleLeaderboardUpdate = useCallback(
    (newParticipants: RankedParticipant[]) => {
      const now = Date.now();
      const timeSinceLastUpdate = now - lastUpdateTimeRef.current;

      // Ch·ªâ c·∫≠p nh·∫≠t UI n·∫øu ƒë√£ qua √≠t nh·∫•t 100ms t·ª´ l·∫ßn c·∫≠p nh·∫≠t tr∆∞·ªõc
      // ƒë·ªÉ tr√°nh qu√° nhi·ªÅu re-render trong th·ªùi gian ng·∫Øn
      if (timeSinceLastUpdate < 100) {
        return;
      }

      lastUpdateTimeRef.current = now;

      console.log(
        '[RealtimeLeaderboard] Nh·∫≠n c·∫≠p nh·∫≠t t·ª´ LeaderboardManager:',
        newParticipants.length,
        'ng∆∞·ªùi tham gia, sau',
        timeSinceLastUpdate,
        'ms'
      );

      // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi tham gia
      setParticipants(newParticipants);

      // ƒê√°nh d·∫•u l√† ƒë√£ c√≥ d·ªØ li·ªáu
      initializedRef.current = true;

      // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng n·∫øu c√≥
      if (currentUserName) {
        const currentUser = newParticipants.find(
          (p) => p.displayName === currentUserName
        );

        if (currentUser && currentUser.realtimeScore !== prevScore) {
          console.log(
            '[RealtimeLeaderboard] C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë t·ª´ LeaderboardManager:',
            {
              oldScore: prevScore,
              newScore: currentUser.realtimeScore,
            }
          );

          setPrevScore(currentUser.realtimeScore);

          if (onScoreUpdate) {
            onScoreUpdate(currentUser.realtimeScore, currentUser.id);
          }
        }
      }

      // C·∫≠p nh·∫≠t th·ª© h·∫°ng tr∆∞·ªõc ƒë√≥
      const newRankings: { [key: string]: number } = {};
      newParticipants.forEach((p, index) => {
        newRankings[p.displayName] = index;
      });
      prevRankingRef.current = newRankings;

      // TƒÉng bi·∫øn ƒë·∫øm m·ªói khi c√≥ c·∫≠p nh·∫≠t t·ª´ server
      updateCountRef.current++;
    },
    [currentUserName, onScoreUpdate, prevScore]
  );

  // ƒêƒÉng k√Ω nh·∫≠n d·ªØ li·ªáu t·ª´ LeaderboardManager
  useEffect(() => {
    // TƒÉng bi·∫øn ƒë·∫øm m·ªói khi component ƒë∆∞·ª£c render
    updateCountRef.current++;

    console.log(
      '[RealtimeLeaderboard] Kh·ªüi t·∫°o, ƒëƒÉng k√Ω v·ªõi LeaderboardManager'
    );

    // L·∫•y instance c·ªßa LeaderboardManager
    const leaderboardManager = LeaderboardManager.getInstance();

    // C·∫•u h√¨nh th·ªùi gian throttle cho LeaderboardManager
    leaderboardManager.setUpdateThrottle(300);

    // ƒêƒÉng k√Ω nh·∫≠n c·∫≠p nh·∫≠t
    const unsubscribe = leaderboardManager.subscribe(handleLeaderboardUpdate);

    // C≈©ng s·ª≠ d·ª•ng prop participants n·∫øu c√≥
    if (
      propParticipants &&
      propParticipants.length > 0 &&
      !initializedRef.current
    ) {
      console.log(
        '[RealtimeLeaderboard] S·ª≠ d·ª•ng participants t·ª´ props:',
        propParticipants.length
      );
      setParticipants(propParticipants as RankedParticipant[]);
    }

    // Cleanup subscription khi component unmount
    return () => {
      console.log('[RealtimeLeaderboard] H·ªßy ƒëƒÉng k√Ω v·ªõi LeaderboardManager');
      unsubscribe();
    };
  }, [
    currentUserName,
    onScoreUpdate,
    prevScore,
    propParticipants,
    handleLeaderboardUpdate,
  ]);

  // H√†m l·∫•y m√†u theo th·ª© h·∫°ng
  const getRankColor = (rank: number) => {
    switch (rank) {
      case 1:
        return 'text-yellow-500';
      case 2:
        return 'text-gray-400';
      case 3:
        return 'text-amber-600';
      default:
        return 'text-gray-600';
    }
  };

  // H√†m l·∫•y bi·ªÉu t∆∞·ª£ng theo th·ª© h·∫°ng
  const getRankIcon = (rank: number) => {
    switch (rank) {
      case 1:
        return 'ü•á';
      case 2:
        return 'ü•à';
      case 3:
        return 'ü•â';
      default:
        return rank;
    }
  };

  // H√†m t√≠nh to√°n s·ª± thay ƒë·ªïi th·ª© h·∫°ng
  const getRankChange = (name: string, currentIndex: number) => {
    const prevIndex = prevRankingRef.current[name];
    // N·∫øu kh√¥ng c√≥ th·ª© h·∫°ng tr∆∞·ªõc ƒë√≥, tr·∫£ v·ªÅ 0 (kh√¥ng c√≥ thay ƒë·ªïi)
    if (prevIndex === undefined) return 0;
    return prevIndex - currentIndex;
  };

  return (
    <Card className='bg-white/50 backdrop-blur-sm border-white/20'>
      <div className='p-4'>
        <div className='flex items-center justify-between mb-4'>
          <h3 className='text-lg font-semibold flex items-center gap-2'>
            <Medal className='w-5 h-5 text-yellow-500' />
            B·∫£ng x·∫øp h·∫°ng
          </h3>
          <span className='text-sm text-gray-500'>
            {participants.length} ng∆∞·ªùi ch∆°i
          </span>
        </div>

        <div className='space-y-2 relative'>
          {participants.length === 0 ? (
            <div className='text-center py-8 text-gray-500'>
              <p>Ch∆∞a c√≥ ng∆∞·ªùi tham gia n√†o</p>
              <p className='text-sm mt-2'>
                Chia s·∫ª m√£ phi√™n ƒë·ªÉ m·ªçi ng∆∞·ªùi tham gia
              </p>
            </div>
          ) : (
            <div>
              <AnimatePresence initial={false}>
                {participants.map((participant) => {
                  const rankChange = getRankChange(
                    participant.displayName,
                    participant.realtimeRanking - 1
                  );
                  const isRankUp = rankChange > 0;
                  const isRankDown = rankChange < 0;
                  const isCurrentUser =
                    participant.displayName === currentUserName;

                  return (
                    <motion.div
                      key={participant.displayName}
                      layout
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{
                        type: 'spring',
                        stiffness: 500,
                        damping: 30,
                        mass: 1,
                      }}
                      className={`flex items-center p-3 rounded-lg mb-2 ${
                        isCurrentUser
                          ? 'bg-indigo-50 border border-indigo-100'
                          : 'bg-white/80 hover:bg-white'
                      }`}
                    >
                      {/* Th·ª© h·∫°ng */}
                      <div className='w-8 text-center font-bold'>
                        <div
                          className={`inline-flex items-center justify-center ${
                            participant.realtimeRanking <= 3
                              ? 'text-lg'
                              : 'text-gray-500'
                          }`}
                        >
                          {getRankIcon(participant.realtimeRanking)}
                        </div>
                      </div>

                      {/* Ch·ªâ b√°o th·ª© h·∫°ng thay ƒë·ªïi */}
                      <div className='w-6 flex items-center justify-center'>
                        {isRankUp && (
                          <motion.div
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            className='text-green-500'
                          >
                            <ChevronUp size={16} />
                          </motion.div>
                        )}
                        {isRankDown && (
                          <motion.div
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            className='text-red-500'
                          >
                            <ChevronDown size={16} />
                          </motion.div>
                        )}
                      </div>

                      {/* Avatar */}
                      <div className='flex-shrink-0 mr-3'>
                        <Avatar className='h-8 w-8 border border-gray-200'>
                          <AvatarImage
                            src={participant.displayAvatar}
                            alt={participant.displayName}
                          />
                          <AvatarFallback>
                            {participant.displayName.substring(0, 2)}
                          </AvatarFallback>
                        </Avatar>
                      </div>

                      {/* T√™n */}
                      <div className='flex-1 truncate'>
                        <p
                          className={`text-sm font-medium ${
                            isCurrentUser ? 'text-indigo-600' : ''
                          }`}
                        >
                          {participant.displayName}
                          {isCurrentUser && (
                            <span className='ml-1 text-xs text-indigo-500'>
                              (b·∫°n)
                            </span>
                          )}
                        </p>
                      </div>

                      {/* ƒêi·ªÉm s·ªë */}
                      <div className='ml-2 flex items-center'>
                        <motion.div
                          key={`score-${participant.realtimeScore}-${updateCountRef.current}`}
                          initial={{ scale: 0.8 }}
                          animate={{ scale: 1 }}
                          className={`px-2 py-1 rounded-full text-sm font-semibold ${
                            isCurrentUser
                              ? 'bg-indigo-100 text-indigo-600'
                              : 'bg-green-100 text-green-600'
                          }`}
                        >
                          {participant.realtimeScore}
                        </motion.div>
                      </div>
                    </motion.div>
                  );
                })}
              </AnimatePresence>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
}
